{"ast":null,"code":"import { LoggingService } from './LoggingService.service';\nimport { DataService } from './data.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./LoggingService.service\";\nimport * as i2 from \"./data.service\";\nvar PersonasService = /** @class */function () {\n  function PersonasService(loggingService, dataService) {\n    this.loggingService = loggingService;\n    this.dataService = dataService;\n    this.personas = [];\n  }\n  //Lo usamos para iniciar el arreglo, ya que ya es asincrono desde la BD\n  //Se inicializa desde el compoente PersonasComponent    \n  PersonasService.prototype.setPersonas = function (personas) {\n    this.personas = personas;\n  };\n  PersonasService.prototype.obtenerPersonas = function () {\n    return this.dataService.cargarPersonas();\n  };\n  PersonasService.prototype.agregarPersona = function (persona) {\n    this.loggingService.enviaMensajeAConsola(\"agregamos persona:\" + persona.toString());\n    if (this.personas == null) {\n      this.personas = [];\n    }\n    this.personas.push(persona);\n    this.dataService.guardarPersonas(this.personas);\n    //Si se guarda solo un elemento se debe trabajar cada indice y regenerarlos con cada modificacion\n    //this.dataService.guardarPersona(persona, this.personas.length);\n  };\n\n  PersonasService.prototype.encontrarPersona = function (index) {\n    var persona = this.personas[index];\n    this.loggingService.enviaMensajeAConsola(\"persona encontrada:\" + persona.toString());\n    return persona;\n  };\n  PersonasService.prototype.modificarPersona = function (index, persona) {\n    this.loggingService.enviaMensajeAConsola(\"persona a modificar:\" + persona.toString() + \" con indice:\" + index);\n    var persona1 = this.personas[index];\n    persona1.nombre = persona.nombre;\n    persona1.apellido = persona.apellido;\n    this.dataService.modificarPersona(index, persona);\n  };\n  PersonasService.prototype.modificarPersonas = function () {\n    this.loggingService.enviaMensajeAConsola(\"modificar todas las personas:\");\n    if (this.personas != null)\n      //Guarda todas las personas nuevamente para regenerar indicess\n      this.dataService.guardarPersonas(this.personas);\n  };\n  PersonasService.prototype.eliminarPersona = function (index) {\n    this.loggingService.enviaMensajeAConsola(\"eliminar persona con indice: \" + index);\n    this.personas.splice(index, 1);\n    this.dataService.eliminarPersona(index);\n    //Se vuelven a guardar todas las personas para que coincida el indice con el arreglo en memoria\n    this.modificarPersonas();\n  };\n  PersonasService.ɵfac = function PersonasService_Factory(t) {\n    return new (t || PersonasService)(i0.ɵɵinject(i1.LoggingService), i0.ɵɵinject(i2.DataService));\n  };\n  PersonasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PersonasService,\n    factory: PersonasService.ɵfac\n  });\n  return PersonasService;\n}();\nexport { PersonasService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}